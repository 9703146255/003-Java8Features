1) Given a list of integers, separate odd and even numbers?

 2) How do you remove duplicate elements from a list using Java 8 streams?
 
 3) How do you find frequency of each character in a string using Java 8 streams?
 
 4) How do you find frequency of each element in an array or a list?
 
 5) How do you sort the given list of decimals in reverse order?
 
 6) Given a list of strings, join the strings with ‘[‘ as prefix, ‘]’ as suffix and ‘,’ as delimiter?
 
 7) From the given list of integers, print the numbers which are multiples of 5?
 
 8) Given a list of integers, find maximum and minimum of those numbers?
 
 9) How do you merge two unsorted arrays into single sorted array using Java 8 streams?
 
 10) How do you merge two unsorted arrays into single sorted array without duplicates?

 11) How do you get three maximum numbers and three minimum numbers from the given list of integers?
 
 12) Java 8 program to check if two strings are anagrams or not?
 
 13) Find sum of all digits of a number in Java 8?
 
 14) Find second largest number in an integer array?

 15) Given a list of strings, sort them according to increasing order of their length?
 
 16) Given an integer array, find sum and average of all elements?

 17) How do you find common elements between two arrays?
 
 18) Reverse each word of a string using Java 8 streams?

 19) How do you find sum of first 10 natural numbers?
 
 20) Reverse an integer array21) Print first 10 even numbers

 22) How do you find the most repeated element in an array?

 23) Palindrome program using Java 8 streams

 24) Given a list of strings, find out those strings which start with a number?
 
 25) How do you extract duplicate elements from an array?
 
 26) Print duplicate characters in a string?

 27) Find first repeated character in a string?
 
 28) Find first non-repeated character in a string?
 
 29) Fibonacci series
 
 30) First 10 odd numbers

 31) How do you get last element of an array?
 
 32) Find the age of a person in years if the birthday has given? give me answers for these by usingjava 8
 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
Intermediate Operations (Creates a New Stream):
================================================
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    Method       | Description                                                                              | Example Usage         |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    mapToInt      | Transforms each element to an int.                                                      | mapToInt(mapper)      |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    mapToLong     | Transforms each element to a long.                                                      | mapToLong(mapper)     |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    mapToDouble   | Transforms each element to a double.                                                    | mapToDouble(mapper)   |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    peek          | Allows performing a side effect on each element without changing them.                  | peek(action)           |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    distinct      | Removes duplicate elements from the stream.                                             | distinct()            |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    sorted        | Sorts the elements based on a comparator or natural ordering.                           | sorted(comparator)    |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    limit         | Truncates the stream to a specified size.                                               | limit(size)           |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    skip          | Skips the specified number of elements from the stream.                                 | skip(count)           |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    filter        | Filters elements based on a given predicate.                                            | filter(predicate)     |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    dropWhile     | Drops elements until a specified predicate is false, then includes the remaining element| dropWhile(predicate)  |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    takeWhile     | Takes elements while a specified predicate is true, then stops when it becomes false.   | takeWhile(predicate)  |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    flatMap       | Flattens streams of elements into a single stream.                                      | flatMap(mapper)       |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    concat        | Concatenates two streams into a single stream.                                           | concat(stream)        |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    map           | Transforms each element to another(int,long,double) using a mapper function.                                 | map(mapper)        |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+

Terminal Operations (Consumes the Stream and Produces a Result):
================================================================

+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    Method       | Description                                                                                   | Example Usage         |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    forEach      | Performs an action on each element of the stream.                                           | forEach(action)       |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    forEachOrdered  | Performs an action on each element in the encounter order of the stream.                  | forEachOrdered(action) |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    toArray      | Collects the elements of the stream into an array.                                          | toArray()             |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    reduce      | Performs a reduction operation on the elements of the stream.                              | reduce(identity, accumulator, combiner) |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    collect      | Performs a mutable reduction operation into a collection or string.                        | collect(Collector)     |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    min          | Finds the minimum element based on the provided comparator.                                | min(comparator)        |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    max          | Finds the maximum element based on the provided comparator.                                | max(comparator)        |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    count        | Returns the count of elements in the stream.                                              | count()               |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    anyMatch     | Checks "if any element matches" the given predicate.                                       | anyMatch(predicate)    |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    allMatch     | Checks if all elements match the given predicate.                                        | allMatch(predicate)    |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    noneMatch    | Checks if none of the elements match the given predicate.                                 | noneMatch(predicate)   |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    findFirst    | Returns the first element in the stream.                                                | findFirst()           |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    findAny      | Returns any element in the stream.                                                       | findAny()             |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    iterator     | Returns an iterator for the elements of the stream.                                      | iterator()            |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+
|    spliterator  | Returns a spliterator for the elements of the stream.                                    | spliterator()         |
+-----------------+------------------------------------------------------------------------------------------+-----------------------+